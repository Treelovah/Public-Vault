import java.text.NumberFormat;
import java.util.Locale;
import java.util.Scanner;

/**
 * <h1>Practical 2: Salary Data based on majors with demographic differences</h1>
 *
 * The purpose of this practical is to encourage students to build the front end on a salary program that
 * is looking at 2017 census data. They will use the SalaryData object which is the
 * data access object, and query that object using a set number of methods.
 *
 *
 *
 * @author Albert Lionelle <br>
 *         lionelle@colostate.edu <br>
 *         Computer Science Department <br>
 *         Colorado State University
 * @version 201910
 */
public class SalaryAnalysis {

    private final static NumberFormat CURRENCY_FMT = NumberFormat.getCurrencyInstance(Locale.US); // it is final because we never want to change it, so prevents that from happening

    private SalaryData data = new SalaryData("salary_data.csv"); // this variable is used throughout your code to access the data.
    private Scanner scanner = new Scanner(System.in);


    /**
     * Use this method to test your other methods - that way you don't hav to go through the full
     * menu system as you develop one line at a time. In the main method, you should uncomment the call
     * to this before you submit your final program. (or comment out all lines in this method)
     *
     * This is purposely fairly empty - as it is for you to use.
     */
     
    public void testMethod() {
       System.out.println("Printing first major to make sure data set loads: " + data.getMajor(0));
       prettyPrint(0);
    }


    /**
     * This method will cycle through all salaries in order.
     * To allow reading to be easier, you should call {@link #prettyPrint(int)} on every major.
     *
     * It is useful to know that calling data.size() will return the total number of majors
     * that are being tracked in the salary data. If you have 27 majors, it will return 27, even though
     * you should loop from 0 to 26.
     *
     */
     
   public void listAll() {
      System.out.println(getHeader());
      for (int i=0;i < data.size(); i++) {
         prettyPrint(i);
      }
   }
   // END TODO 1
   
   // TODO 2
   
   public static char question1(){
        String q = "What does SalaryAnalysis.java do?";
        return 'c';
    }

    public static char question2(){
        String q = "What does SalaryData.java do?";
        return 'b';
    }

    public static char question3(){
        String q = "What does findHighestSalary() do?";
        return 'a';
    }

    public static char question4(){
        String q = "What does printPretty() do?";
        return 'b';
    }
    
    // TODO END 2

    /**
     * Prints out a single line of Salary Data using a pretty print style format
     * The format is as follows.
     * <pre>
     *     DataID.  Major  Average Male Salary  Average Female Salary  Average White Salary Average PoC Salary  Average Salary  Percent Male    Percent Female Percent White Percent PoC
     * </pre>
     *
     * here is an example using Ag. Science
     * <pre>
     *     0.	Agriculture / Animal Sciences	$57,028.99	$47,437.97	$55,829.54	$47,817.34	$54,624.16	74.93%	25.07%	84.96%	15.04%
     * </pre>
     *
     * It should be noted that the spaces are actually the tab characters \t
     * Everything should be formatted using the Currency Formatter <br>
     *
     * @param dataID the salary you want printed from 0 - size of the data
     */
     
    public void prettyPrint(int dataID) {
        System.out.print(dataID + ".\t");
        System.out.print(data.getMajor(dataID) + "\t");
        System.out.print(CURRENCY_FMT.format(data.getMaleSalary(dataID)) + "\t");
        System.out.print(CURRENCY_FMT.format(data.getFemaleSalary(dataID)) + "\t");
        System.out.print(CURRENCY_FMT.format(data.getWhiteSalary(dataID)) + "\t");
        System.out.print(CURRENCY_FMT.format(data.getPocSalary(dataID)) + "\t");
        System.out.print(CURRENCY_FMT.format(data.getSalary(dataID)) + "\t");
        System.out.print(data.getMalePercent(dataID) + "%\t");
        System.out.print(data.getFemalePercent(dataID) + "%\t");
        System.out.print(data.getWhitePercent(dataID) + "%\t");
        System.out.println(data.getPocPercent(dataID) + "%\t");

    }

    /**
     * Finds the dataId of the major with the highest starting salary.
     *
     * @return dataID - the id of the major with the highest salary
     */
    public int findHighestSalary() {
        int dataID = 0;
        double salary = 0;
        for(int i = 0; i < data.size(); i++) {
            if(data.getSalary(i) > salary) {
                salary = data.getSalary(i);
                dataID = i;
            }
        }

        return dataID;
    }

    /**
     * Prints out the main menu. Placed in this method already completed
     * to make sure there aren't any simple spelling errors causing
     * long hours debugging.
     */

    private void printMenuOptions() {
        System.out.println();
        System.out.println();
        System.out.println("Salary Data Viewer 1.0");
        System.out.println("Main Menu");
        System.out.println("1. List All");
        System.out.println("2. Find Highest");
        System.out.println("0. Exit program");
        System.out.print("Select an option: "); // notice it is print not println!
    }

    /**
     * Uses the {@link #scanner} to grab the next line. It will then
     * parse the line as an integer. If there is an error, returns -1.
     * We use this instead of nextInt() as it is more robust.
     * @return the number or -1 is not a number
     */
     
    private int getClientInputAsInt() {
        String val = scanner.nextLine();
        try {
            return Integer.parseInt(val);
        } catch (NumberFormatException ex) {
            return -1;
        }
    }

    /**
     * for ease of printing and grading, an error message that is uniform.
     * @return a common error message.
     */
     
    private String getInvalidMessage() {
        return "Invalid entry. Try again.";
    }

    /**
     * Returns the header for printing multiple datalines in a row
     */
    private String getHeader() {
        return "DataID.\tMajor\tAvg. Male Salary\tAvg. Female Salary\tAvg. White Salary\tAvg. PoC Salary\tSalary\tMale %\tFemale %\tWhite %\tPoC %";
    }

    /**
     * Main menu for the application.
     */

    public void mainMenu() {
        printMenuOptions();
        int input = getClientInputAsInt();

        if(input == 0) {
            return;
        } else if (input == 1) {
            listAll();
        } else if (input == 2) {
            System.out.println(getHeader());
            prettyPrint(findHighestSalary());
        } else {
            System.out.println(getInvalidMessage());
        }
        mainMenu();
    }

    /**
     * Main driver class for the program.
     * @param args allows for a file to be passed in on the command line, but not used by students
     */

    public static void main(String[] args) {
        SalaryAnalysis p2 = new SalaryAnalysis();

        if(args.length > 0) { // this check allows for loading of additional data files from the command line
            p2.data = new SalaryData(args[0]); // for the most part, you won't have to worry about it.
        }
        p2.testMethod();

        p2.mainMenu();

    }
}
